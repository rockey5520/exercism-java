type: edu
custom_name: stage4
files:
- name: test/SortingTest.java
  visible: false
  text: |
    import common.SortingToolStage4Test;

    public class SortingTest extends SortingToolStage4Test {

    }
  learner_created: false
- name: test/common/SortingToolStage4Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import sorting.Main
    import java.util.*

    abstract class SortingToolStage4Test : StageTest<SortingToolClue>(Main::class.java) {

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }



    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }

    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
- name: src/sorting/Type.java
  visible: true
  text: |
    package sorting;

    public enum Type {
      LINE("line"),
      WORD("word"),
      LONG("long");

      private final String type;

      Type(String type) {
        this.type = type;
      }

      public String getType() {
        return type;
      }
    }
  learner_created: true
- name: src/sorting/Main.java
  visible: true
  text: |
    package sorting;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.Scanner;

    public class Main {
        public static void main(final String[] args) {
            //stage 3
            if (args.length == 0) {
                return;
            }
            Map<String, String> arguments = new HashMap<>();
            for (int i = 0; i < args.length; ++i) {
                switch (args[i]) {
                    case "-dataType":
                        if (i + 1 < args.length) {
                            arguments.put(args[i], args[i + 1]);
                        }
                        break;
                    case "-sortIntegers":
                        arguments.put(args[i], "");
                        break;
                }
            }

            Sorting Sorting = new Sorting();
            Scanner scanner = new Scanner(System.in);
            StringBuilder stringBuilder = new StringBuilder();
            while (scanner.hasNextLine()) {
                stringBuilder.append(scanner.nextLine()).append("\n");
            }

            for (var entry : arguments.entrySet()) {
                switch (entry.getKey()) {
                    case "-dataType":
                        Sorting.setType(Type.valueOf(entry.getValue().toUpperCase()));
                        break;
                    case "-sortIntegers":
                        Sorting.setType(Type.LONG);
                        break;
                }
            }

            Sorting.include(stringBuilder);

            if (arguments.containsKey("-dataType")
                && arguments.containsKey("-sortIntegers")) {
                Sorting.sort();
            } else {
                for (var entry : arguments.entrySet()) {
                    switch (entry.getKey()) {
                        case "-dataType":
                            Sorting.show();
                            break;
                        case "-sortIntegers":
                            Sorting.sort();
                            break;
                    }
                }
            }

        /*    //stage 2
            if (args.length == 0) {
                return;
            }
            Sorting sorting = new Sorting();
            if (args.length == 2 && args[0].contains("-dataType")) {
                sorting.setType(args[1].toUpperCase());
            }

            Scanner scanner = new Scanner(System.in);
            StringBuilder stringBuilder = new StringBuilder();
            while (scanner.hasNextLine()) {
                stringBuilder.append(scanner.nextLine()).append("\n");
            }
            sorting.create(stringBuilder);
            sorting.display();*/

            /*
            // stage 1
            Scanner scanner = new Scanner(System.in);
            var list = new ArrayList();
            int counter = 0;
            while (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                list.add(number);
                counter++;
            }
            list.sort(Collections.reverseOrder());
            int frequency = Collections.frequency(list, list.get(0));
            System.out.println("Total numbers: " + counter);
            System.out.println("The greatest number: " + list.get(0) + " (" + frequency + " time(s)).");*/
        }
    }
  learner_created: true
- name: src/sorting/Sorting.java
  visible: true
  text: |-
    package sorting;


    import java.util.ArrayDeque;
    import java.util.ArrayList;
    import java.util.Deque;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    public class Sorting {
      private Type type;
      private List<String> list;
      private Deque<String> maxValue;
      private Map<String, Integer> maxCount;

      public Type getType() {
        return type;
      }

      public void setType(Type type) {
        this.type = type;
      }

      public void setType(String type) {
        try {
          this.type = Type.valueOf(type);
        } catch (Exception e) {
          e.printStackTrace();
        }
      }

      public Sorting() {
        this.type = Type.WORD;
        this.list = new ArrayList<>();
        this.maxValue = new ArrayDeque<>();
        this.maxCount = new HashMap<>();
      }

      public void include(StringBuilder stringBuilder) {
        switch (type) {
          case LINE:
            for (String item : stringBuilder.toString().split("\n")) {
              include(item);
            }
            break;
          case WORD:
          case LONG:
            for (String item : stringBuilder.toString().split("\\s+")) {
              include(item);
            }
            break;
        }
      }

      public void include(String value) {
        if (list.size() > 0) {
          if (compare(value, maxValue.peek()) >= 0) {
            list.add(value);
            maxValue.push(value);
          } else if (compare(value, list.get(0)) < 0) {
            list.add(0, value);
          } else {
            if (compare(value, maxValue.peekFirst()) == compare(value, maxValue.peekLast())) {
              int i = list.size() / 2;
              long diff = compare(value, list.get(i));
              long oldDiff = Math.abs(diff);
              while (diff != 0) {
                if (oldDiff > Math.abs(diff)) break;
                if (diff > 0) ++i;
                if (diff < 0) --i;
                diff = compare(value, list.get(i));
                oldDiff = Math.abs(diff);
              }
              list.add(i, value);
            } else if (compare(value, maxValue.peekFirst()) > 0) {
              for (int i = list.size() - 1; i >= 0; --i) {
                if (compare(value, list.get(i)) >= 0) {
                  list.add(i, value);
                  break;
                }
              }
            } else {
              for (int i = 0; i < list.size(); ++i) {
                if (compare(value, list.get(i)) <= 0) {
                  list.add(i, value);
                  break;
                }
              }
            }
          }
        } else {
          list.add(value);
          maxValue.add(value);
        }
        if (maxCount.containsKey(value)) {
          maxCount.replace(value, maxCount.get(value) + 1);
        } else {
          maxCount.put(value, 1);
        }
      }

      private int compare(String first, String second) {
        switch (type) {
          case LINE:
            return first.length() - second.length();
          case WORD:
    //                Good solution, bud not finished test 8
    //                if (first.length() == second.length()) {
    //                    return Character.compare(first.charAt(0), second.charAt(0));
    //                }
    //                return first.length() - second.length();
    //                Bad solution
            if (first.matches("-?\\d+") && second.matches("-?\\d+")) {
              int a = Integer.parseInt(first);
              int b = Integer.parseInt(second);
              return Integer.compare(a, b);
            } else {
              return first.length() - second.length();
            }
          case LONG:
            return (int) (Long.parseLong(first) - Long.parseLong(second));
        }
        return 0;
      }

      public void show() {
        String string = "";
        int size = list.size();
        int time = maxCount.get(maxValue.peek());
        int weight = 100 * time / size;
        switch (type) {
          case LINE:
            string = "Total lines: %d\nThe longest line:\n%s\n(%d + time(s), %d%%).";
            break;
          case WORD:
            string = "Total words: %d\nThe longest word: %s (%d + time(s), %d%%).";
            break;
          case LONG:
            string = "Total numbers: %d\nThe greatest number: %s (%d + time(s), %d%%).";
            break;
        }
        System.out.format(string, size, maxValue.peek(), time, weight);
      }

      public void sort() {
        String string = "";
        int size = list.size();
        switch (type) {
          case LINE:
            string = "Total lines: %d.\nSorted data:";
            break;
          case WORD:
            string = "Total words: %d.\nSorted data:";
            break;
          case LONG:
            string = "Total numbers: %d.\nSorted data:";
            break;
        }
        System.out.format(string, size);
        for (String item : list) {
          System.out.print(" " + item);
        }
        System.out.println();
      }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/45/stages/242/implement
status: Solved
record: 4
