type: edu
custom_name: stage6
files:
- name: test/SortingTest.java
  visible: false
  text: |
    import common.SortingToolStage6Test;

    public class SortingTest extends SortingToolStage6Test {

    }
  learner_created: false
- name: test/common/SortingToolStage6Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import sorting.Main
    import java.io.File
    import java.io.FileNotFoundException
    import java.util.*

    abstract class SortingToolStage6Test : StageTest<SortingToolClue>(Main::class.java) {

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests() + stage5Tests() + stage6Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            @Suppress("NAME_SHADOWING") var reply = reply

            val fileNameArgIdx = clue.args.indexOf("-outputFile")

            if (fileNameArgIdx != -1) {
                val fileName = clue.args[fileNameArgIdx + 1]

                try {
                    reply = File(fileName).readText()
                } catch (ex: FileNotFoundException) {
                    return CheckResult.wrong(
                        "There is no output file $fileName"
                    )
                }

            }

            return when {
                badArgs(clue.args) -> CheckResult(true)  // TODO: test something here
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun badArgs(args: List<String>): Boolean {
            val unknownArgs =
                    args.toSet() - setOf("-dataType", "-sortingType", "long", "word", "line", "natural", "byCount")

            if (unknownArgs.isNotEmpty()) {
                return true
            }

            if (args.last() == "-dataType" || args.last() == "-sortingType") {
                return true
            }

            return false
        }
    }

    private fun fileTestCase(
            input: String,
            revealTest: Boolean,
            file: String,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(input, revealTest, args.toList()))
                .addArguments(*args)
                .addFile(file, input)
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }

    fun stage5Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long", "-abc"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line", "-cde"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-dataType", "line", "-sortingType"
                )
        )
    }

    fun stage6Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "input.txt",
                        "-sortingType", "byCount", "-inputFile", "input.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "data.dat",
                        "-sortingType", "byCount", "-inputFile", "data.dat", "-outputFile", "out.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        false,
                        "input.txt",
                        "-sortingType", "natural", "-inputFile", "input.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        false,
                        "data.dat",
                        "-sortingType", "natural", "-inputFile", "data.dat", "-outputFile", "out.txt"
                )
        )
    }


    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }


    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }


    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }


    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
- name: src/sorting/Main.java
  visible: true
  text: |-
    package sorting;

    import java.util.HashMap;
    import java.util.Map;
    import sorting.Sorting.InputType;
    import sorting.Sorting.OutputType;

    public class Main {

      public static void main(final String[] args) {
        //stage 6
          if (args.length == 0) {
            return;
          }

          Map<String, String> mapArgs = new HashMap<>();
          for (int i = 0; i < args.length; ++i) {
            if (i + 1 < args.length) {
              mapArgs.put(args[i], args[i + 1]);
              ++i;
            } else {
              mapArgs.put(args[i], null);
            }
          }
          Sorting genericsSorting = new Sorting();
          for (var entry : mapArgs.entrySet()) {
            switch (entry.getKey()) {
              case "-dataType":
                if (entry.getValue() == null) {
                  System.out.println("No data type defined!");
                  return;
                }
                genericsSorting.setType(entry.getValue());
                break;
              case "-sortingType":
                if (entry.getValue() == null) {
                  System.out.println("No sorting type defined!");
                  return;
                }
                genericsSorting.setSortingOrder(entry.getValue());
                break;
              case "-inputFile":
                if (entry.getValue() == null) {
                  System.out.println("No inputFile name defined!");
                  return;
                }
                genericsSorting.setInputType(InputType.INPUTFILE);
                genericsSorting.setInputName(entry.getValue());
                break;
              case "-outputFile":
                if (entry.getValue() == null) {
                  System.out.println("No inputFile name defined!");
                  return;
                }
                genericsSorting.setOutputType(OutputType.OUTPUTFILE);
                genericsSorting.setOutputName(entry.getValue());
                break;
              default:
                System.out.println("\"" + entry.getKey() + "\" isn't a valid parameter. It's skipped.");
            }
          }
          genericsSorting.execute();
          genericsSorting.sort();
        }

        /* //stage 5
        if (args.length == 0) {
          return;
        }

        Map<String, String> arguments = new HashMap<>();
        for (int i = 0; i < args.length; ++i) {
          if (i + 1 < args.length) {
            arguments.put(args[i], args[i + 1]);
            ++i;
          } else {
            arguments.put(args[i], null);
          }
        }
        Sorting genericsSorting = new Sorting();
        for (var entry : arguments.entrySet()) {
          switch (entry.getKey()) {
            case "-dataType":
              if (entry.getValue() == null) {
                System.out.println("No data type defined!");
                return;
              }
              genericsSorting.setType(entry.getValue());
              break;
            case "-sortingType":
              if (entry.getValue() == null) {
                System.out.println("No sorting type defined!");
                return;
              }
              genericsSorting.setSorting(entry.getValue());
              break;
            default:
              System.out.println("\"" + entry.getKey() + "\" isn't a valid parameter. It's skipped.");
          }
        }

        Scanner scanner = new Scanner(System.in);
        StringBuilder stringBuilder = new StringBuilder();
        while (scanner.hasNextLine()) {
          stringBuilder.append(scanner.nextLine()).append("\n");
        }
        genericsSorting.inclusive(stringBuilder);
        genericsSorting.sort();*/
        /* //stage 4
        if (args.length == 0) {
          return;
        }

        Map<String, String> arguments = new HashMap<>();
        for (int i = 0; i < args.length; ++i) {
          if (i + 1 < args.length) {
            arguments.put(args[i], args[i + 1]);
            ++i;
          } else {
            arguments.put(args[i], null);
          }
        }

        Sorting genericsSorting = new Sorting();
        Scanner scanner = new Scanner(System.in);
        StringBuilder stringBuilder = new StringBuilder();
        while (scanner.hasNextLine()) {
          stringBuilder.append(scanner.nextLine()).append("\n");
        }

        genericsSorting.setSorting(Nature.NATURAL);
        genericsSorting.setType(Type.WORD);

        for (var entry : arguments.entrySet()) {
          switch (entry.getKey()) {
            case "-dataType":
              genericsSorting.setType(entry.getValue());
              break;
            case "-sortingType":
              genericsSorting.setSorting(entry.getValue());
              break;
          }
        }
        genericsSorting.inlcusive(stringBuilder);
        genericsSorting.sort();
      }*/
          /*  //stage 3
            if (args.length == 0) {
                return;
            }
            Map<String, String> arguments = new HashMap<>();
            for (int i = 0; i < args.length; ++i) {
                switch (args[i]) {
                    case "-dataType":
                        if (i + 1 < args.length) {
                            arguments.put(args[i], args[i + 1]);
                        }
                        break;
                    case "-sortIntegers":
                        arguments.put(args[i], "");
                        break;
                }
            }

            Sorting Sorting = new Sorting();
            Scanner scanner = new Scanner(System.in);
            StringBuilder stringBuilder = new StringBuilder();
            while (scanner.hasNextLine()) {
                stringBuilder.append(scanner.nextLine()).append("\n");
            }

            for (var entry : arguments.entrySet()) {
                switch (entry.getKey()) {
                    case "-dataType":
                        Sorting.setType(Type.valueOf(entry.getValue().toUpperCase()));
                        break;
                    case "-sortIntegers":
                        Sorting.setType(Type.LONG);
                        break;
                }
            }

            Sorting.include(stringBuilder);

            if (arguments.containsKey("-dataType")
                && arguments.containsKey("-sortIntegers")) {
                Sorting.sort();
            } else {
                for (var entry : arguments.entrySet()) {
                    switch (entry.getKey()) {
                        case "-dataType":
                            Sorting.show();
                            break;
                        case "-sortIntegers":
                            Sorting.sort();
                            break;
                    }
                }
            }*/

        /*    //stage 2
            if (args.length == 0) {
                return;
            }
            Sorting sorting = new Sorting();
            if (args.length == 2 && args[0].contains("-dataType")) {
                sorting.setType(args[1].toUpperCase());
            }

            Scanner scanner = new Scanner(System.in);
            StringBuilder stringBuilder = new StringBuilder();
            while (scanner.hasNextLine()) {
                stringBuilder.append(scanner.nextLine()).append("\n");
            }
            sorting.create(stringBuilder);
            sorting.display();*/

            /*
            // stage 1
            Scanner scanner = new Scanner(System.in);
            var list = new ArrayList();
            int counter = 0;
            while (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                list.add(number);
                counter++;
            }
            list.sort(Collections.reverseOrder());
            int frequency = Collections.frequency(list, list.get(0));
            System.out.println("Total numbers: " + counter);
            System.out.println("The greatest number: " + list.get(0) + " (" + frequency + " time(s)).");*/
      }
    }
  learner_created: true
- name: src/sorting/Sorting.java
  visible: true
  text: |-
    package sorting;


    import java.io.FileNotFoundException;
    import java.io.FileOutputStream;
    import java.io.PrintStream;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.Scanner;
    import java.util.TreeMap;

    public class Sorting {

      public enum Type {
        LINE,
        WORD,
        LONG
      }

      public enum SortingOrder {
        NATURAL,
        BYCOUNT
      }

      public enum InputType {
        SCANNER,
        INPUTFILE
      }

      public enum OutputType {
        SCANNER,
        OUTPUTFILE
      }

      private Type type;
      private SortingOrder sortingOrder;
      private InputType inputType;
      private String inputName;
      private OutputType outputType;
      private String outputName;
      private final List<String> stringList;
      private final Map<String, Integer> maxCount;

      public void setType(String type) {
        try {
          this.type = Type.valueOf(type.toUpperCase());
        } catch (Exception e) {
          e.printStackTrace();
        }
      }

      public void setSortingOrder(String sosortingOrder) {
        try {
          this.sortingOrder = SortingOrder.valueOf(sosortingOrder.toUpperCase());
        } catch (Exception e) {
          e.printStackTrace();
        }
      }

      public void setInputType(InputType inputType) {
        this.inputType = inputType;
      }

      public void setOutputType(OutputType outputType) {
        this.outputType = outputType;
      }

      public void setInputName(String inputName) {
        this.inputName = inputName;
      }

      public void setOutputName(String outputName) {
        this.outputName = outputName;
      }

      public Sorting() {
        this.type = Type.WORD;
        this.sortingOrder = SortingOrder.NATURAL;
        this.inputType = InputType.SCANNER;
        this.outputType = OutputType.SCANNER;
        this.stringList = new ArrayList<>();
        this.maxCount = new TreeMap<>();
      }

      public void execute() {
        Scanner scannerInput = null;
        switch (inputType) {
          case SCANNER:
            scannerInput = new Scanner(System.in);
            break;
          case INPUTFILE:
            scannerInput = new Scanner(inputName);
            break;
        }
        try {
          StringBuilder stringBuilder = new StringBuilder();
          while (scannerInput.hasNextLine()) {
            stringBuilder.append(scannerInput.nextLine()).append("\n");
          }
          include(stringBuilder);
          scannerInput.close();
        } catch (Exception e) {
          e.printStackTrace();
        }

        switch (outputType) {
          case SCANNER:
            System.setOut(System.out);
            break;
          case OUTPUTFILE:
            try {
              System.setOut(new PrintStream(new FileOutputStream(outputName)));
            } catch (FileNotFoundException e) {
              e.printStackTrace();
            }
            break;
        }
      }

      private void include(StringBuilder stringBuilder) {
        switch (type) {
          case LINE:
            for (String item : stringBuilder.toString().split("\n")) {
              include(item);
            }
            break;
          case WORD:
            for (String item : stringBuilder.toString().split("\\s+")) {
              include(item);
            }
            break;
          case LONG:
            for (String item : stringBuilder.toString().split("\\s+")) {
              if (item.matches("-?\\d+")) {
                include(item);
              } else {
                System.out.println("\"" + item + "\" isn't a long. It's skipped.");
              }
            }
            break;
        }
      }

      private void include(String value) {
        stringList.add(value);
        if (maxCount.containsKey(value)) {
          maxCount.replace(value, maxCount.get(value) + 1);
        } else {
          maxCount.put(value, 1);
        }
      }

      public void sort() {
        String string = "";
        int size = stringList.size();
        switch (type) {
          case LINE:
            Collections.sort(stringList);
            string = "Total lines: %d.\n";
            break;
          case WORD:
            Collections.sort(stringList);
            string = "Total words: %d.\n";
            break;
          case LONG:
            List<Long> array = new ArrayList<>();
            for (String item : stringList) {
              array.add(Long.parseLong(item));
            }
            Collections.sort(array);
            stringList.clear();
            for (Long item : array) {
              stringList.add(String.valueOf(item));
            }
            string = "Total numbers: %d.\n";
            break;
        }
        switch (sortingOrder) {
          case NATURAL:
            System.out.format(string + "Sorted data:", size);
            for (String item : stringList) {
              System.out.print(" " + item);
            }
            break;
          case BYCOUNT:
            Map<String, Integer> mapSort = new LinkedHashMap<>();
            for (String item : stringList) {
              mapSort.put(item, maxCount.get(item));
            }

            LinkedHashMap<String, Integer> reverseSortedMap = new LinkedHashMap<>();
            mapSort.entrySet().stream().sorted(Map.Entry.comparingByValue())
                .forEachOrdered(x -> reverseSortedMap.put(x.getKey(), x.getValue()));

            System.out.format(string, size);
            for (var item : reverseSortedMap.entrySet()) {
              int weight = 100 * item.getValue() / size;
              System.out.println(item.getKey() + ": " + item.getValue() + " time(s), " + weight + "%");
            }
            break;
        }
      }
    }
  learner_created: true
- name: out.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/45/stages/244/implement
status: Solved
record: -1
