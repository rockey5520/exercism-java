type: edu
custom_name: stage5
files:
- name: test/SortingTest.java
  visible: false
  text: |
    import common.SortingToolStage5Test;

    public class SortingTest extends SortingToolStage5Test {

    }
  learner_created: false
- name: test/common/SortingToolStage5Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import sorting.Main
    import java.util.*

    abstract class SortingToolStage5Test : StageTest<SortingToolClue>(Main::class.java) {

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests() + stage5Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                badArgs(clue.args) -> CheckResult(true)  // TODO: test something here
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun badArgs(args: List<String>): Boolean {
            val unknownArgs =
                    args.toSet() - setOf("-dataType", "-sortingType", "long", "word", "line", "natural", "byCount")

            if (unknownArgs.isNotEmpty()) {
                return true
            }

            if (args.last() == "-dataType" || args.last() == "-sortingType") {
                return true
            }

            return false
        }
    }

    fun stage5Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long", "-abc"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line", "-cde"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-dataType", "line", "-sortingType"
                )
        )
    }


    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }


    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }

    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }

  learner_created: false
- name: src/sorting/Main.java
  visible: true
  text: "package sorting;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport\
    \ java.util.Scanner;\n\npublic class Main {\n\n  public static void main(final\
    \ String[] args) {\n   //stage 5\n    \n    /* //stage 4\n    if (args.length\
    \ == 0) {\n      return;\n    }\n\n    Map<String, String> arguments = new HashMap<>();\n\
    \    for (int i = 0; i < args.length; ++i) {\n      if (i + 1 < args.length) {\n\
    \        arguments.put(args[i], args[i + 1]);\n        ++i;\n      } else {\n\
    \        arguments.put(args[i], null);\n      }\n    }\n\n    Sorting genericsSorting\
    \ = new Sorting();\n    Scanner scanner = new Scanner(System.in);\n    StringBuilder\
    \ stringBuilder = new StringBuilder();\n    while (scanner.hasNextLine()) {\n\
    \      stringBuilder.append(scanner.nextLine()).append(\"\\n\");\n    }\n\n  \
    \  genericsSorting.setSorting(Nature.NATURAL);\n    genericsSorting.setType(Type.WORD);\n\
    \n    for (var entry : arguments.entrySet()) {\n      switch (entry.getKey())\
    \ {\n        case \"-dataType\":\n          genericsSorting.setType(entry.getValue());\n\
    \          break;\n        case \"-sortingType\":\n          genericsSorting.setSorting(entry.getValue());\n\
    \          break;\n      }\n    }\n    genericsSorting.inlcusive(stringBuilder);\n\
    \    genericsSorting.sort();\n  }*/\n      /*  //stage 3\n        if (args.length\
    \ == 0) {\n            return;\n        }\n        Map<String, String> arguments\
    \ = new HashMap<>();\n        for (int i = 0; i < args.length; ++i) {\n      \
    \      switch (args[i]) {\n                case \"-dataType\":\n             \
    \       if (i + 1 < args.length) {\n                        arguments.put(args[i],\
    \ args[i + 1]);\n                    }\n                    break;\n         \
    \       case \"-sortIntegers\":\n                    arguments.put(args[i], \"\
    \");\n                    break;\n            }\n        }\n\n        Sorting\
    \ Sorting = new Sorting();\n        Scanner scanner = new Scanner(System.in);\n\
    \        StringBuilder stringBuilder = new StringBuilder();\n        while (scanner.hasNextLine())\
    \ {\n            stringBuilder.append(scanner.nextLine()).append(\"\\n\");\n \
    \       }\n\n        for (var entry : arguments.entrySet()) {\n            switch\
    \ (entry.getKey()) {\n                case \"-dataType\":\n                  \
    \  Sorting.setType(Type.valueOf(entry.getValue().toUpperCase()));\n          \
    \          break;\n                case \"-sortIntegers\":\n                 \
    \   Sorting.setType(Type.LONG);\n                    break;\n            }\n \
    \       }\n\n        Sorting.include(stringBuilder);\n\n        if (arguments.containsKey(\"\
    -dataType\")\n            && arguments.containsKey(\"-sortIntegers\")) {\n   \
    \         Sorting.sort();\n        } else {\n            for (var entry : arguments.entrySet())\
    \ {\n                switch (entry.getKey()) {\n                    case \"-dataType\"\
    :\n                        Sorting.show();\n                        break;\n \
    \                   case \"-sortIntegers\":\n                        Sorting.sort();\n\
    \                        break;\n                }\n            }\n        }*/\n\
    \n    /*    //stage 2\n        if (args.length == 0) {\n            return;\n\
    \        }\n        Sorting sorting = new Sorting();\n        if (args.length\
    \ == 2 && args[0].contains(\"-dataType\")) {\n            sorting.setType(args[1].toUpperCase());\n\
    \        }\n\n        Scanner scanner = new Scanner(System.in);\n        StringBuilder\
    \ stringBuilder = new StringBuilder();\n        while (scanner.hasNextLine())\
    \ {\n            stringBuilder.append(scanner.nextLine()).append(\"\\n\");\n \
    \       }\n        sorting.create(stringBuilder);\n        sorting.display();*/\n\
    \n        /*\n        // stage 1\n        Scanner scanner = new Scanner(System.in);\n\
    \        var list = new ArrayList();\n        int counter = 0;\n        while\
    \ (scanner.hasNextLong()) {\n            long number = scanner.nextLong();\n \
    \           list.add(number);\n            counter++;\n        }\n        list.sort(Collections.reverseOrder());\n\
    \        int frequency = Collections.frequency(list, list.get(0));\n        System.out.println(\"\
    Total numbers: \" + counter);\n        System.out.println(\"The greatest number:\
    \ \" + list.get(0) + \" (\" + frequency + \" time(s)).\");*/\n}"
  learner_created: true
- name: src/sorting/Sorting.java
  visible: true
  text: |-
    package sorting;


    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.TreeMap;

    enum Nature {
      NATURAL,
      BYCOUNT
    }
    public class Sorting {
      private Type type;
      private Nature sorting;
      private List<String> list;
      private Map<String, Integer> maxCount;

      public Type getType() {
        return type;
      }

      public void setType(Type type) {
        this.type = type;
      }

      public void setType(String type) {
        if (type == null) {
          this.type = Type.WORD;
        } else {
          try {
            this.type = Type.valueOf(type.toUpperCase());
          } catch (Exception e) {
            e.printStackTrace();
          }
        }
      }

      public Nature getSorting() {
        return sorting;
      }

      public void setSorting(Nature sorting) {
        this.sorting = sorting;
      }

      public void setSorting(String sorting) {
        if (sorting == null) {
          this.sorting = Nature.NATURAL;
        } else {
          try {
            this.sorting = Nature.valueOf(sorting.toUpperCase());
          } catch (Exception e) {
            e.printStackTrace();
          }
        }
      }

      public Sorting() {
        this.type = Type.WORD;
        this.list = new ArrayList<>();
        this.maxCount = new TreeMap<>();
      }

      public void inlcusive(StringBuilder stringBuilder) {
        switch (type) {
          case LINE:
            for (String item : stringBuilder.toString().split("\n")) {
              inlcusive(item);
            }
            break;
          case WORD:
          case LONG:
            for (String item : stringBuilder.toString().split("\\s+")) {
              inlcusive(item);
            }
            break;
        }
      }

      public void inlcusive(String value) {
        list.add(value);
        if (maxCount.containsKey(value)) {
          maxCount.replace(value, maxCount.get(value) + 1);
        } else {
          maxCount.put(value, 1);
        }
      }

      public void sort() {
        String string = "";
        int size = list.size();
        switch (type) {
          case LINE:
            Collections.sort(list);
            string = "Total lines: %d.\n";
            break;
          case WORD:
            Collections.sort(list);
            string = "Total words: %d.\n";
            break;
          case LONG:
            List<Long> array = new ArrayList<>();
            for (String item : list) {
              array.add(Long.parseLong(item));
            }
            Collections.sort(array);
            list.clear();
            for (Long item : array) {
              list.add(String.valueOf(item));
            }
            string = "Total numbers: %d.\n";
            break;
        }
        switch (sorting) {
          case NATURAL:
            System.out.format(string + "Sorted data:", size);
            for (String item : list) {
              System.out.print(" " + item);
            }
            break;
          case BYCOUNT:
            Map<String, Integer> mapSort = new LinkedHashMap<>();
            for (String item : list) {
              mapSort.put(item, maxCount.get(item));
            }

            LinkedHashMap<String, Integer> reverseSortedMap = new LinkedHashMap<>();
            mapSort.entrySet().stream().sorted(Map.Entry.comparingByValue())
                .forEachOrdered(x -> reverseSortedMap.put(x.getKey(), x.getValue()));

            System.out.format(string, size);
            for (var item : reverseSortedMap.entrySet()) {
              int weight = 100 * item.getValue() / size;
              System.out.println(item.getKey() + ": " + item.getValue() + " time(s), " + weight + "%");
            }
            break;
        }
      }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/45/stages/243/implement
status: Solved
record: 5
