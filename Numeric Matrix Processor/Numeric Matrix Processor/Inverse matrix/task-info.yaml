type: edu
custom_name: stage6
files:
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import processor.Main;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    import static java.lang.Math.abs;


    class TestClue {

        String feedback;
        ArrayList<Double> answers;

        TestClue(String feedback, Double[] answers) {
            this.feedback = feedback;
            this.answers = new ArrayList<>(Arrays.asList(answers));
        }
    }

    public class NumericMatrixProcessorTest extends StageTest<TestClue> {

        public NumericMatrixProcessorTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            7d, 13d, 132d,
                            17d, 23d, 45d,
                            65d, 57d, 78d
                        }))
                    .setInput(
                        "1\n"+
                            "3 3\n" +
                            "3 4 55\n" +
                            "4 1 1\n" +
                            "9 0 0\n" +
                            "3 3\n" +
                            "4 9 77\n" +
                            "13 22 44\n" +
                            "56 57 78\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            43.13d, 911.62d, 1311.8d, 136.53d,
                            -4.2d, 141.1d, -1.09d, 1421.6d,
                            230.33d, 114.2d, 100.7d, 990.4d,
                            956.72d, 168.94d, 112.16d, 27.0d
                        }))
                    .setInput(
                        "1\n"+
                            "4 4\n" +
                            "-0.3 677.4 435.2 123.33\n" +
                            "1.3 141.4 0.11 1411.4\n" +
                            "231.33 113.4 99.9 999.9\n" +
                            "1002.22 123.44 55.66 13.3\n" +
                            "4 4\n" +
                            "43.43 234.22 876.6 13.2\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            187d, 3978d, 7548d,
                            7752d, 5831d, 3774d,
                            16949d, 7752d, 7752d
                        }))
                    .setInput(
                        "2\n" +
                            "3 3\n" +
                            "11 234 444\n" +
                            "456 343 222\n" +
                            "997 456 456\n" +
                            "17\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            1123653d, 5933505d, 110927295d, 2365632d,
                            1505049d, 8619594d, 25665531d, 3833274d,
                            1366632d, 2598732d ,37999962d, 58303305d,
                            11068143d, 9781653d ,13666653d ,13443321d
                        }))
                    .setInput(
                        "2\n" +
                            "4 4\n" +
                            "10123 53455 999345 21312\n" +
                            "13559 77654 231221 34534\n" +
                            "12312 23412 342342 525255\n" +
                            "99713 88123 123123 121111\n" +
                            "111\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            45d, 113d, 11d, 266d,
                            84d, 139d, 29d, 229d,
                            45d, 49d, 35d, 100d,
                            15d, 86d, 0d, 281d ,
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "1 2 2 7\n" +
                            "3 3 4 5\n" +
                            "5 0 0 1\n" +
                            "0 1 0 8\n" +
                            "4 4\n" +
                            "9 8 7 13\n" +
                            "15 14 0 1\n" +
                            "3 7 2 3\n" +
                            "0 9 0 35\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            243d, 295d, 78d, 60d,
                            724d, 798d, 2063d, 175d
                        }))
                    .setInput(
                        "3\n" +
                            "2 3\n" +
                            "1 0 17\n" +
                            "15 19 7\n" +
                            "3 4\n" +
                            "5 6 78 9\n" +
                            "29 31 47 1\n" +
                            "14 17 0 3\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if you can do more than one operation in a loop",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d,
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 2 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 5 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 2 4\n" +
                            "4 6 6\n" +
                            "7 7 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 5 4\n" +
                            "4 6 6\n" +
                            "7 7 1.0\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "3\n" +
                            "4 4\n" +
                            "6 5 4 2\n" +
                            "8 7 6 6\n" +
                            "1 0 0 5.0\n" +
                            "9 2 8 8\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "4\n" +
                            "4 4\n" +
                            "8 8 2 9\n" +
                            "5 0 0 1\n" +
                            "6 6 7 8.0\n" +
                            "2 4 5 6\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            31d
                        }))
                    .setInput(
                        "5\n" +
                            "3 3\n" +
                            "1 2 3\n" +
                            "4 5 7\n" +
                            "10 22 23\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            45.2197d
                        }))
                    .setInput(
                        "5\n" +
                            "4 4\n" +
                            "2.65 3.54 3.88 8.99\n" +
                            "3.12 5.45 7.77 5.56\n" +
                            "5.31 2.23 2.33 9.81\n" +
                            "1.67 1.67 1.01 9.99\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if inversion algorithm is correct",
                        new Double[]{
                            1.14717, 2.03717, 2.9711,
                            2.19055, 4.52055, 7.20788,
                            3.67009, 0.590087, 1.33819
                        }))
                    .setInput(
                        "6\n" +
                            "3 3\n" +
                            "0.396796 -0.214938 0.276735\n" +
                            "5.19655 -2.06983 -0.388886\n" +
                            "-3.3797 1.50219 0.159794\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if inversion algorithm is correct",
                        new Double[]{
                            0.396796, -0.214938, 0.276735, -0.5092,
                            5.19655, -2.06983, -0.388886, -3.14252,
                            -3.3797, 1.50219, 0.159794, 2.04842,
                            -0.593332, 0.230065, 0.00259267, 0.50345
                        }))
                    .setInput(
                        "6\n" +
                            "4 4\n" +
                            "2.65 3.54 3.88 8.99\n" +
                            "3.12 5.45 7.77 5.56\n" +
                            "5.31 2.23 2.33 9.81\n" +
                            "1.67 1.67 1.01 9.99\n" +
                            "0")
            );
        }


        @Override
        public CheckResult check(String reply, TestClue clue) {

            try {

                String[] strNumbers = reply.lines()
                    .filter(line -> {
                        line = line.strip();
                        if (line.length() == 0) {
                            return false;
                        }
                        for (char c : line.toCharArray()) {
                            if (!(c == ' ' ||
                                c >= '0' && c <= '9' ||
                                c == '.' ||
                                c == '-' || c == '+' ||
                                c == 'e' || c == 'E')) {
                                return false;
                            }
                        }
                        return true;
                    }).reduce("", (a, b) -> a + " " + b)
                    .strip().split("\\s+");

                double[] actual = Arrays.stream(strNumbers).mapToDouble(Double::parseDouble).toArray();

                double[] expected =
                    clue.answers.stream()
                        .mapToDouble(e -> e)
                        .toArray();
                if (actual.length != expected.length) {
                    return new CheckResult(false, clue.feedback);
                }

                for (int i = 0; i < actual.length; i++) {
                    if (abs(actual[i] - expected[i]) > 0.01) {
                        return new CheckResult(false, clue.feedback);
                    }
                }
            }
            catch (Exception ex) {
                return new CheckResult(false, "Can't check the answer");
            }

            return CheckResult.correct();

        }

    }
  learner_created: false
- name: src/processor/Main.java
  visible: true
  text: "package processor;\n\nimport java.util.Scanner;\n\npublic class Main {\n\n\
    \  public static void main(String[] args) {\n    //Stage 5\n    Scanner sc = new\
    \ Scanner(System.in);\n    int n;\n    int m;\n    double [][] mA;\n    double\
    \ [][] mB;\n\n    while(true) {\n      System.out.println(\"1. Add matrices\\\
    r\\n\" +\n          \"2. Multiply a matrix to a constant\\r\\n\" +\n         \
    \ \"3. Multiply matrices\\r\\n\" +\n          \"4. Transpose a matrix\\r\\n\"\
    \ +\n          \"5. Calculate a determinant\\r\\n\" +\n          \"6. Inverse\
    \ matrix\\r\\n\" +\n          \"0. Exit\\r\\n Your choice: \");\n      switch\
    \ (sc.nextInt()) {\n        case 0:\n          return;\n        case 1:\n    \
    \      System.out.println(\"Enter the size of the first matrix: \");\n       \
    \   n = sc.nextInt();\n          m = sc.nextInt();\n          mA = new double\
    \ [n][m];\n          System.out.println(\"Enter the first matrix:\");\n      \
    \    for(int i = 0; i<n; i++) {\n            for(int j = 0; j<m; j++) {\n    \
    \          mA[i][j] = sc.nextDouble();\n            }\n          }\n         \
    \ System.out.println(\"Enter the size of the second matrix: \");\n          if(n\
    \ != sc.nextInt() ||\tm != sc.nextInt()) {\n            System.out.println(\"\
    ERROR\");\n            System.out.println();\n            sc.nextInt();\n    \
    \        break;\n          }\n          System.out.println(\"Enter the second\
    \ matrix:\");\n          mB = new double [n][m];\n          for(int i = 0; i<n;\
    \ i++) {\n            for(int j = 0; j<m; j++) {\n              mB[i][j] = sc.nextDouble();\n\
    \            }\n          }\n          System.out.println(\"The addition result\
    \ is: \");\n          add(mA, mB);\n          System.out.println();\n        \
    \  break;\n        case 2:\n          System.out.println(\"Enter the size of a\
    \ matrix: \");\n          n = sc.nextInt();\n          m = sc.nextInt();\n   \
    \       mA = new double [n][m];\n          System.out.println(\"Enter a matrix:\"\
    );\n          for(int i = 0; i<n; i++) {\n            for(int j = 0; j<m; j++)\
    \ {\n              mA[i][j] = sc.nextDouble();\n            }\n          }\n \
    \         System.out.println(\"Enter a constant:\");\n          double c = sc.nextInt();\n\
    \          System.out.println(\"The multiplication result is:\");\n          printMatrix(multiplyMatrixConstant(mA,c));\n\
    \          System.out.println();\n          break;\n        case 3:\n        \
    \  System.out.println(\"Enter the size of the first matrix: \");\n          n\
    \ = sc.nextInt();\n          m = sc.nextInt();\n          mA = new double [n][m];\n\
    \          System.out.println(\"Enter the first matrix:\");\n          for(int\
    \ i = 0; i<n; i++) {\n            for(int j = 0; j<m; j++) {\n              mA[i][j]\
    \ = sc.nextDouble();\n            }\n          }\n          System.out.println(\"\
    Enter the size of the second matrix: \");\n          if(m != sc.nextInt()) {\n\
    \            System.out.println(\"ERROR\");\n            System.out.println();\n\
    \            sc.nextInt();\n            break;\n          }\n          n = sc.nextInt();\n\
    \          System.out.println(\"Enter the second matrix:\");\n          mB = new\
    \ double [n][m];\n          for(int i = 0; i<m; i++) {\n            for(int j\
    \ = 0; j<n; j++) {\n              mB[j][i] = sc.nextDouble();\n            }\n\
    \          }\n          System.out.println(\"The multiplication result is: \"\
    );\n          mulWithConstant(mA, mB);\n          System.out.println();\n    \
    \      break;\n        case 4:\n          System.out.println(\"1. Main diagonal\\\
    r\\n\" +\n              \"2. Side diagonal\\r\\n\" +\n              \"3. Vertical\
    \ line\\r\\n\" +\n              \"4. Horizontal line\\r\\n Your choice: \");\n\
    \          int choice = sc.nextInt();\n          if(choice<1 || choice>4) {\n\
    \            System.out.println();\n            break;\n          }\n        \
    \  System.out.println(\"Enter the size of the matrix: \");\n          n = sc.nextInt();\n\
    \          m = sc.nextInt();\n          if(choice<3) {\n            if(n!=m) {\n\
    \              System.out.println(\"ERROR: The matrix mast be square!\");\n  \
    \            System.out.println();\n              break;\n            }\n    \
    \      }\n          mA = new double [n][m];\n          System.out.println(\"Enter\
    \ the matrix:\");\n          for(int i = 0; i<n; i++) {\n            for(int j\
    \ = 0; j<m; j++) {\n              mA[i][j] = sc.nextDouble();\n            }\n\
    \          };\n          System.out.println(\"The matrix transposition is: \"\
    );\n          switch (choice) {\n            case 1:\n              printMatrix(matrixTranspositionMain(mA));\n\
    \              System.out.println();\n              break;\n            case 2:\n\
    \              mTS(mA);\n              break;\n            case 3:\n         \
    \     mTV(mA);\n              break;\n            case 4:\n              mTH(mA);\n\
    \              break;\n            default:\n              break;\n          }\n\
    \          break;\n        case 5:\n\n          System.out.println(\"Enter the\
    \ size of the matrix: \");\n          n = sc.nextInt();\n          if(n!=sc.nextInt())\
    \ {\n            System.out.println(\"ERROR: The matrix mast be square!\");\n\
    \            System.out.println();\n            break;\n          }\n        \
    \  mA = new double [n][n];\n          System.out.println(\"Enter the matrix:\"\
    );\n          for(int i = 0; i<n; i++) {\n            for(int j = 0; j<n; j++)\
    \ {\n              mA[i][j] = sc.nextDouble();\n            }\n          };\n\
    \          System.out.println(\"The determinant of the matrix is: \");\n     \
    \     System.out.println(mD(mA));\n          System.out.println();\n         \
    \ break;\n\n        case 6:\n\n          System.out.println(\"Enter the size of\
    \ the matrix: \");\n          n = sc.nextInt();\n          if(n!=sc.nextInt())\
    \ {\n            System.out.println(\"ERROR: The matrix mast be square!\");\n\
    \            System.out.println();\n            break;\n          }\n        \
    \  mA = new double [n][n];\n          System.out.println(\"Enter the matrix:\"\
    );\n          for(int i = 0; i<n; i++) {\n            for(int j = 0; j<n; j++)\
    \ {\n              mA[i][j] = sc.nextDouble();\n            }\n          };\n\
    \          double det = mD(mA);\n          if(det==0) {\n            System.out.println(\"\
    ERROR: The matrix is singular!\");\n            System.out.println();\n      \
    \      break;\n          }\n          System.out.println(\"The inverse matrix\
    \ is: \");\n          mI(mA, det);\n          System.out.println();\n        \
    \  break;\n\n        default:\n          break;\n      }\n\n    }\n  }\n\n  private\
    \ static void mI(double[][] matrixA, double det) {\n    double [][] matrix = matrixTranspositionMain(matrixA);\n\
    \    double [][] matrixC = cofMat(matrix);\n    det = 1/det;\n    printMatrix(multiplyMatrixConstant(matrixC,\
    \ det));\n  }\n\n  private static double[][] cofMat(double[][] matrixA) {\n  \
    \  int n = matrixA.length;\n    double[][] matrixC = new double [n][n];\n    double[][]\
    \ matrixB = new double [n-1][n-1];\n    for(int i = 0; i<n; i++) {\n      for(int\
    \ j = 0; j<n; j++) {\n        matrixB = mMatrixByRow(matrixA, i,j);\n        matrixC[i][j]\
    \ = ((i+j)%2==0?1:-1)* mD(matrixB);\n      }\n    }\n    return matrixC;\n  }\n\
    \n\n  private static double mD(double[][] matrixA) {\n    int n = matrixA.length;\n\
    \    if (n == 1 ) {return matrixA[0][0];}\n    if (n == 2 ) {\n      return matrixA[0][0]*matrixA[1][1]-matrixA[0][1]*matrixA[1][0];\n\
    \    }\n    double det = 0;\n    double[][] matrixB = new double [n-1][n-1];\n\
    \    for(int j = 0; j<n; j++) {\n      matrixB = MinorMatrixBy1row(matrixA, j);\n\
    \      det+= (j%2==0?1:-1)*matrixA[0][j]* mD(matrixB);\n    }\n\n    return det;\n\
    \  }\n\n  private static double[][] MinorMatrixBy1row(double[][] matrixA, int\
    \ jIndex) {\n    int n = matrixA.length;\n    double[][] matrixB = new double\
    \ [n-1][n-1];\n    for(int i = 1; i<n; i++) {\n      for(int j = 0, k = 0; j<n;\
    \ j++, k++) {\n        if(jIndex == j) {\n          k--;\n          continue;\n\
    \        }\n        matrixB[i-1][k] = matrixA[i][j];\n      }\n    };\n    return\
    \ matrixB;\n  }\n\n  private static double[][] mMatrixByRow(double[][] matrixA,\
    \ int iIndex, int jIndex) {\n    int n = matrixA.length;\n    double[][] matrixB\
    \ = new double [n-1][n-1];\n    for(int i = 0, l = 0; i<n; i++, l++) {\n     \
    \ if(iIndex == i) {\n        l--;\n        continue;\n      }\n      for(int j\
    \ = 0, k = 0; j<n; j++, k++) {\n        if(jIndex == j) {\n          k--;\n  \
    \        continue;\n        }\n        matrixB[l][k] = matrixA[i][j];\n      }\n\
    \    };\n    return matrixB;\n  }\n\n\n  private static void mTV(double[][] matrix)\
    \ {\n    for(int i = 0; i<matrix.length; i++) {\n      for(int j = 0; j<matrix[0].length;\
    \ j++) {\n        System.out.print(matrix[i][matrix[0].length-1-j]);\n       \
    \ System.out.print(\" \");\n      }\n      System.out.println();\n    }\n  }\n\
    \n  private static void mTH(double[][] matrix) {\n    for(int i = 0; i<matrix.length;\
    \ i++) {\n      for(int j = 0; j<matrix[0].length; j++) {\n        System.out.print(matrix[matrix.length-1-i][j]);\n\
    \        System.out.print(\" \");\n      }\n      System.out.println();\n    }\n\
    \  }\n\n  static void mTS(double[][] matrix) {\n    for(int i = 0; i<matrix.length;\
    \ i++) {\n      for(int j = 0; j<matrix.length; j++) {\n        System.out.print(matrix[matrix.length-1-j][matrix.length-1-i]);\n\
    \        System.out.print(\" \");\n      }\n      System.out.println();\n    }\n\
    \n  }\n\n  static void add(double[][] matrixA, double[][] matrixB) {\n    for(int\
    \ i = 0; i<matrixA.length; i++) {\n      for(int j = 0; j<matrixA[0].length; j++)\
    \ {\n        System.out.print(matrixA[i][j]+matrixB[i][j]);\n        System.out.print(\"\
    \ \");\n      }\n      System.out.println();\n    }\n  }\n\n  static double[][]\
    \ multiplyMatrixConstant(double[][] matrix, double c) {\n    int n = matrix.length;\n\
    \    int m = matrix[0].length;\n    double[][] matrixM = new double[n][m];\n \
    \   for(int i = 0; i<n; i++) {\n      for(int j = 0; j<m; j++) {\n        matrixM[i][j]\
    \ = matrix[i][j]*c;\n      }\n    }\n    return matrixM;\n  }\n\n  static void\
    \ mulWithConstant(double[][] matrixA, double[][] matrixB) {\n    double resMatrix\
    \ = 0;\n    for(int i = 0; i<matrixA.length; i++) {\n      for(int j = 0; j<matrixB.length;\
    \ j++) {\n        for (int k = 0; k < matrixA[0].length; k++) {\n          resMatrix\
    \ += matrixA[i][k]*matrixB[j][k];\n        }\n        System.out.print(resMatrix);\n\
    \        resMatrix = 0;\n        System.out.print(\" \");\n      }\n      System.out.println();\n\
    \    }\n  }\n\n  static double[][] matrixTranspositionMain(double[][] matrix)\
    \ {\n    int n = matrix.length;\n    double[][] matrixT = new double [n][n];\n\
    \    for(int i = 0; i<n; i++) {\n      for(int j = 0; j<n; j++) {\n        matrixT[i][j]\
    \ = matrix[j][i];\n      }\n    }\n    return matrixT;\n  }\n\n  static void printMatrix\
    \ (double [][] matrix) {\n    int n = matrix.length;\n    for(int i = 0; i<n;\
    \ i++) {\n      for(int j = 0; j<n; j++) {\n        if(j == 0) System.out.printf(\"\
    % #.6f\", matrix[i][j]);\n        else System.out.printf(\"% #8.6f\", matrix[i][j]);\n\
    \        System.out.print(\" \");\n      }\n      System.out.println();\n    }\n\
    \n\n    /*//Stage 4\n    Scanner sc = new Scanner(System.in);\n    int n;\n  \
    \  int m;\n    double [][] mA;\n    double [][] mB;\n\n    while(true) {\n   \
    \   System.out.println(\"1. Add matrices\\r\\n\" +\n          \"2. Multiply a\
    \ matrix to a constant\\r\\n\" +\n          \"3. Multiply matrices\\r\\n\" +\n\
    \          \"4. Transpose a matrix\\r\\n\" +\n          \"0. Exit\\r\\n Your choice:\
    \ \");\n      switch (sc.nextInt()) {\n        case 0:\n          return;\n  \
    \      case 1:\n          System.out.println(\"Enter the size of the first matrix:\
    \ \");\n          n = sc.nextInt();\n          m = sc.nextInt();\n          mA\
    \ = new double [n][m];\n          System.out.println(\"Enter the first matrix:\"\
    );\n          for(int i = 0; i<n; i++) {\n            for(int j = 0; j<m; j++)\
    \ {\n              mA[i][j] = sc.nextDouble();\n            }\n          }\n \
    \         System.out.println(\"Enter the size of the second matrix: \");\n   \
    \       if(n != sc.nextInt() ||\tm != sc.nextInt()) {\n            System.out.println(\"\
    ERROR\");\n            System.out.println();\n            sc.nextInt();\n    \
    \        break;\n          }\n          System.out.println(\"Enter the second\
    \ matrix:\");\n          mB = new double [n][m];\n          for(int i = 0; i<n;\
    \ i++) {\n            for(int j = 0; j<m; j++) {\n              mB[i][j] = sc.nextDouble();\n\
    \            }\n          }\n          System.out.println(\"The addition result\
    \ is: \");\n          add(mA, mB);\n          System.out.println();\n        \
    \  break;\n        case 2:\n          System.out.println(\"Enter the size of a\
    \ matrix: \");\n          n = sc.nextInt();\n          m = sc.nextInt();\n   \
    \       mA = new double [n][m];\n          System.out.println(\"Enter a matrix:\"\
    );\n          for(int i = 0; i<n; i++) {\n            for(int j = 0; j<m; j++)\
    \ {\n              mA[i][j] = sc.nextDouble();\n            }\n          }\n \
    \         System.out.println(\"Enter a constant:\");\n          double c = sc.nextInt();\n\
    \          System.out.println(\"The multiplication result is:\");\n          multiplyByConstant(mA,c);\n\
    \          System.out.println();\n          break;\n        case 3:\n        \
    \  System.out.println(\"Enter the size of the first matrix: \");\n          n\
    \ = sc.nextInt();\n          m = sc.nextInt();\n          mA = new double [n][m];\n\
    \          System.out.println(\"Enter the first matrix:\");\n          for(int\
    \ i = 0; i<n; i++) {\n            for(int j = 0; j<m; j++) {\n              mA[i][j]\
    \ = sc.nextDouble();\n            }\n          }\n          System.out.println(\"\
    Enter the size of the second matrix: \");\n          if(m != sc.nextInt()) {\n\
    \            System.out.println(\"ERROR\");\n            System.out.println();\n\
    \            sc.nextInt();\n            break;\n          }\n          n = sc.nextInt();\n\
    \          System.out.println(\"Enter the second matrix:\");\n          mB = new\
    \ double [n][m];\n          for(int i = 0; i<m; i++) {\n            for(int j\
    \ = 0; j<n; j++) {\n              mB[j][i] = sc.nextDouble();\n            }\n\
    \          }\n          System.out.println(\"The multiplication result is: \"\
    );\n          multiply(mA, mB);\n          System.out.println();\n          break;\n\
    \        case 4:\n          System.out.println(\"1. Main diagonal\\r\\n\" +\n\
    \              \"2. Side diagonal\\r\\n\" +\n              \"3. Vertical line\\\
    r\\n\" +\n              \"4. Horizontal line\\r\\n Your choice: \");\n       \
    \   int choice = sc.nextInt();\n          if(choice<1 || choice>4) {\n       \
    \     System.out.println();\n            break;\n          }\n          System.out.println(\"\
    Enter the size of the matrix: \");\n          n = sc.nextInt();\n          m =\
    \ sc.nextInt();\n          if(choice<3) {\n            if(n!=m) {\n          \
    \    System.out.println(\"ERROR: The matrix mast be square!\");\n            \
    \  System.out.println();\n              break;\n            }\n          }\n \
    \         mA = new double [n][m];\n          System.out.println(\"Enter the matrix:\"\
    );\n          for(int i = 0; i<n; i++) {\n            for(int j = 0; j<m; j++)\
    \ {\n              mA[i][j] = sc.nextDouble();\n            }\n          };\n\
    \          System.out.println(\"The matrix transposition is: \");\n          switch\
    \ (choice) {\n            case 1:\n              matrixTranspositionMainDiagonal(mA);\n\
    \              System.out.println();\n              break;\n            case 2:\n\
    \              matrixTranspositionSidediagonal(mA);\n              break;\n  \
    \          case 3:\n              matrixTranspositionVerticalline(mA);\n     \
    \         break;\n            case 4:\n              matrixTranspositionHorisontalline(mA);\n\
    \              break;\n            default:\n              break;\n          }\n\
    \n\n        default:\n          break;\n      }\n\n    }\n  }\n\n  private static\
    \ void matrixTranspositionVerticalline(double[][] matrix) {\n    for(int i = 0;\
    \ i<matrix.length; i++) {\n      for(int j = 0; j<matrix[0].length; j++) {\n \
    \       System.out.print(matrix[i][matrix[0].length-1-j]);\n        System.out.print(\"\
    \ \");\n      }\n      System.out.println();\n    }\n  }\n\n  private static void\
    \ matrixTranspositionHorisontalline(double[][] matrix) {\n    for(int i = 0; i<matrix.length;\
    \ i++) {\n      for(int j = 0; j<matrix[0].length; j++) {\n        System.out.print(matrix[matrix.length-1-i][j]);\n\
    \        System.out.print(\" \");\n      }\n      System.out.println();\n    }\n\
    \  }\n\n  static void matrixTranspositionSidediagonal(double[][] matrix) {\n \
    \   for(int i = 0; i<matrix.length; i++) {\n      for(int j = 0; j<matrix.length;\
    \ j++) {\n        System.out.print(matrix[matrix.length-1-j][matrix.length-1-i]);\n\
    \        System.out.print(\" \");\n      }\n      System.out.println();\n    }\n\
    \n  }\n\n  static void add(double[][] matrixA, double[][] matrixB) {\n    for(int\
    \ i = 0; i<matrixA.length; i++) {\n      for(int j = 0; j<matrixA[0].length; j++)\
    \ {\n        System.out.print(matrixA[i][j]+matrixB[i][j]);\n        System.out.print(\"\
    \ \");\n      }\n      System.out.println();\n    }\n  }\n\n  static void multiplyByConstant(double[][]\
    \ matrix, double c) {\n    for(int i = 0; i<matrix.length; i++) {\n      for(int\
    \ j = 0; j<matrix[0].length; j++) {\n        System.out.print(matrix[i][j]*c);\n\
    \        System.out.print(\" \");\n      }\n      System.out.println();\n    }\n\
    \  }\n\n  static void multiply(double[][] matrixA, double[][] matrixB) {\n   \
    \ double resMatrix = 0;\n    for(int i = 0; i<matrixA.length; i++) {\n      for(int\
    \ j = 0; j<matrixB.length; j++) {\n        for (int k = 0; k < matrixA[0].length;\
    \ k++) {\n          resMatrix += matrixA[i][k]*matrixB[j][k];\n        }\n   \
    \     System.out.print(resMatrix);\n        resMatrix = 0;\n        System.out.print(\"\
    \ \");\n      }\n      System.out.println();\n    }\n  }\n\n  static void matrixTranspositionMainDiagonal(double[][]\
    \ matrix) {\n    for(int i = 0; i<matrix.length; i++) {\n      for(int j = 0;\
    \ j<matrix.length; j++) {\n        System.out.print(matrix[j][i]);\n        System.out.print(\"\
    \ \");\n      }\n      System.out.println();\n    }\n*/\n    //stage 3\n    /*Scanner\
    \ sc = new Scanner(System.in);\n    int n;\n    int m;\n    double[][] mA;\n \
    \   double[][] mB;\n\n    while (true) {\n      System.out.println(\"1. Add matrices\\\
    r\\n\" +\n          \"2. Multiply matrix to a constant\\r\\n\" +\n          \"\
    3. Multiply matrices\\r\\n\" +\n          \"0. Exit\\r\\n Your choice: \");\n\
    \      switch (sc.nextInt()) {\n        case 0:\n          return;\n        case\
    \ 1:\n          System.out.println(\"Enter the size of the first matrix: \");\n\
    \          n = sc.nextInt();\n          m = sc.nextInt();\n          mA = new\
    \ double[n][m];\n          System.out.println(\"Enter the first matrix:\");\n\
    \          for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++)\
    \ {\n              mA[i][j] = sc.nextDouble();\n            }\n          }\n \
    \         System.out.println(\"Enter the size of the second matrix: \");\n   \
    \       if (n != sc.nextInt() || m != sc.nextInt()) {\n            System.out.println(\"\
    ERROR\");\n            System.out.println();\n            sc.nextInt();\n    \
    \        break;\n          }\n          System.out.println(\"Enter the second\
    \ matrix:\");\n          mB = new double[n][m];\n          for (int i = 0; i <\
    \ n; i++) {\n            for (int j = 0; j < m; j++) {\n              mB[i][j]\
    \ = sc.nextDouble();\n            }\n          }\n          System.out.println(\"\
    The addition result is: \");\n          add(mA, mB);\n          System.out.println();\n\
    \          break;\n        case 2:\n          System.out.println(\"Enter the size\
    \ of a matrix: \");\n          n = sc.nextInt();\n          m = sc.nextInt();\n\
    \          mA = new double[n][m];\n          System.out.println(\"Enter a matrix:\"\
    );\n          for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m;\
    \ j++) {\n              mA[i][j] = sc.nextDouble();\n            }\n         \
    \ }\n          System.out.println(\"Enter a constant:\");\n          double c\
    \ = sc.nextInt();\n          System.out.println(\"The multiplication result is:\"\
    );\n          multiplyByConstant(mA, c);\n          System.out.println();\n  \
    \        break;\n        case 3:\n          System.out.println(\"Enter the size\
    \ of the first matrix: \");\n          n = sc.nextInt();\n          m = sc.nextInt();\n\
    \          mA = new double[n][m];\n          System.out.println(\"Enter the first\
    \ matrix:\");\n          for (int i = 0; i < n; i++) {\n            for (int j\
    \ = 0; j < m; j++) {\n              mA[i][j] = sc.nextDouble();\n            }\n\
    \          }\n          System.out.println(\"Enter the size of the second matrix:\
    \ \");\n          if (m != sc.nextInt()) {\n            System.out.println(\"\
    ERROR\");\n            System.out.println();\n            sc.nextInt();\n    \
    \        break;\n          }\n          n = sc.nextInt();\n          System.out.println(\"\
    Enter the second matrix:\");\n          mB = new double[n][m];\n          for\
    \ (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n     \
    \         mB[j][i] = sc.nextDouble();\n            }\n          }\n          System.out.println(\"\
    The multiplication result is: \");\n          multiply(mA, mB);\n          System.out.println();\n\
    \          break;\n        default:\n          break;\n      }\n\n    }\n  }\n\
    \n  static void add(double[][] matrixA, double[][] matrixB) {\n    for (int i\
    \ = 0; i < matrixA.length; i++) {\n      for (int j = 0; j < matrixA[0].length;\
    \ j++) {\n        System.out.print(matrixA[i][j] + matrixB[i][j]);\n        System.out.print(\"\
    \ \");\n      }\n      System.out.println();\n    }\n  }\n\n  static void multiplyByConstant(double[][]\
    \ matrix, double c) {\n    for (int i = 0; i < matrix.length; i++) {\n      for\
    \ (int j = 0; j < matrix[0].length; j++) {\n        System.out.print(matrix[i][j]\
    \ * c);\n        System.out.print(\" \");\n      }\n      System.out.println();\n\
    \    }\n  }\n\n  static void multiply(double[][] matrixA, double[][] matrixB)\
    \ {\n    double resMatrix = 0;\n    for (int i = 0; i < matrixA.length; i++) {\n\
    \      for (int j = 0; j < matrixB.length; j++) {\n        for (int k = 0; k <\
    \ matrixA[0].length; k++) {\n          resMatrix += matrixA[i][k] * matrixB[j][k];\n\
    \        }\n        System.out.print(resMatrix);\n        resMatrix = 0;\n   \
    \     System.out.print(\" \");\n      }\n      System.out.println();\n    }*/\n\
    \   /* //stage 2\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n\
    \    int m = sc.nextInt();\n    int[][] matrixA = new int[n][m];\n    for (int\
    \ i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        matrixA[i][j]\
    \ = sc.nextInt();\n      }\n    }\n    int c = sc.nextInt();\n\n    for (int[]\
    \ integer : matrixA\n    ) {\n      for (Integer integer1 : integer\n      ) {\n\
    \        System.out.print(integer1 * c);\n        System.out.print(\" \");\n \
    \     }\n      System.out.println();\n    }*/\n  }\n\n}\n//Stage 1\n    /*Scanner\
    \ sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int m = sc.nextInt();\n\
    \    int[][] matrixA = new int[n][m];\n    for (int i = 0; i < n; i++) {\n   \
    \   for (int j = 0; j < m; j++) {\n        matrixA[i][j] = sc.nextInt();\n   \
    \   }\n    }\n    if (n != sc.nextInt() || m != sc.nextInt()) {\n      System.out.println(\"\
    ERROR\");\n      return;\n    }\n    int[][] matrixB = new int[n][m];\n    for\
    \ (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        matrixB[i][j]\
    \ = sc.nextInt();\n      }\n    }\n\n    for (int i = 0; i < n; i++) {\n     \
    \ for (int j = 0; j < m; j++) {\n        System.out.print(matrixA[i][j] + matrixB[i][j]);\n\
    \        System.out.print(\" \");\n      }\n      System.out.println();\n    }*/\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/60/stages/328/implement
status: Solved
record: -1
